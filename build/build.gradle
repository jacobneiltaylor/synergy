// build.gradle
apply plugin: 'cpp'
apply plugin: 'google-test'

import org.apache.tools.ant.taskdefs.condition.Os

def VS_2015_INCLUDE_DIR = "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.10586.0\\"
def VS_2015_LIB_DIR = "C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.10586.0\\"
def GTEST_INCLUDE_DIR = "gtest/googletest/include/"

model {

	platforms
	{
		x86 {
			architecture "x86"
		}

		x64 {
			architecture "x64"
		}
	}

	components {
		synergy(NativeLibrarySpec) {
			targetPlatform "x86"
            targetPlatform "x64"
			sources {
				cpp {
					source.srcDir "../src/"
					source.include "**/**.cpp"
					source.exclude "**/natives/**/**.cpp"
					exportedHeaders.srcDir "../include/"
				}
			}
		}
	}

	repositories {
		libs(PrebuiltLibraries)
		{
			gtest
			{
				headers.srcDir GTEST_INCLUDE_DIR
				binaries.withType(StaticLibraryBinary) {
					staticLibraryFile = file(getGTestLib(targetPlatform))
				}
			}
		}
	}

	tasks {

		buildGoogleTest (Exec) {
			if(Os.isFamily(Os.FAMILY_WINDOWS)) {
				commandLine "powershell","./gtest/gtest-build.ps1"
			}
			else {
				commandLine "/bin/sh","./gtest/gtest-build.sh"
			}
		}
		
		withType(CppCompile) {
			dependsOn buildGoogleTest
		}
	}

	testSuites {
		synergyTest {
			sources {
				cpp {
					source.srcDir "../test/"
					source.include "**/test_main.cpp"
					source.exclude "**/googletest/**.cpp"
					exportedHeaders.srcDir "../include/"
					exportedHeaders.srcDir "./gtest/googletest/include/"
				}
			}
		}
	}

	binaries {
		all {
			if(targetPlatform.operatingSystem.isWindows())
			{
				cppCompiler.define "_WIN32"
				cppCompiler.args "/EHsc"
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "ucrt" 
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "shared"
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "um"

				if(targetPlatform.architecture.name == "x86") {
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "um\\x86"
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "ucrt\\x86"
				}
				else if(targetPlatform.architecture.name == "x86-64") {
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "um\\x64"
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "ucrt\\x64"
				}
			}
		}

		withType(NativeLibraryBinarySpec) {
			if(!targetPlatform.operatingSystem.isWindows())
			{
				cppCompiler.args "-std=c++11"
				cppCompiler.define "_POSIXSO"

				linker.args "-std=c++11"
			}
			else
			{
				cppCompiler.define "_WIN32"
				cppCompiler.define "_WINDLL"
				cppCompiler.args "/EHsc"
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "ucrt" 
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "shared"
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "um"

				if(targetPlatform.architecture.name == "x86") {
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "um\\x86"
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "ucrt\\x86"
				}
				else if(targetPlatform.architecture.name == "x86-64") {
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "um\\x64"
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "ucrt\\x64"
				}
			}
		}

		withType(GoogleTestTestSuiteBinarySpec){
			lib library: "gtest", linkage: "static"
			cppCompiler.args "-I" + GTEST_INCLUDE_DIR
			if(!targetPlatform.operatingSystem.isWindows())
			{
				cppCompiler.args "-std=c++11"
				cppCompiler.define "_POSIXSO"

				linker.args "-std=c++11"
			}
			else
			{
				cppCompiler.define "_WIN32"
				cppCompiler.define "_WINDLL"
				cppCompiler.args "/EHsc"
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "ucrt" 
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "shared"
				cppCompiler.args "-I" + VS_2015_INCLUDE_DIR + "um"

				if(targetPlatform.architecture.name == "x86") {
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "um\\x86"
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "ucrt\\x86"
				}
				else if(targetPlatform.architecture.name == "x86-64") {
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "um\\x64"
					linker.args "/LIBPATH:" + VS_2015_LIB_DIR + "ucrt\\x64"
				}
			}
		}
	}
}

def getGTestLib(Platform platform)
{
	def GTEST_LIB_DIR = "gtest/googletest/"
	
	if(platform.operatingSystem.isWindows())
	{
		if(platform.architecture.name == "x86") {
			return GTEST_LIB_DIR + "x86\\Release\\gtest.lib"
		}
		else if (platform.architecture.name == "x86-64") {
			return GTEST_LIB_DIR + "x64\\Release\\gtest.lib"
		}
	}
	else 
	{
		if(platform.architecture.name == "x86") {
			return GTEST_LIB_DIR + "x86/gtest.a"
		}
		else if (platform.architecture.name == "x86-64") {
			return GTEST_LIB_DIR + "x64/gtest.a"
		}
	}
	return "Unknown";
}